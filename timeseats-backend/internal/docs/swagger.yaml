basePath: /api/v1
definitions:
  handlers.AddProductToSlotRequest:
    properties:
      initialQuantity:
        type: integer
      productId:
        type: string
    type: object
  handlers.CreateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/handlers.OrderItemCreateInput'
        type: array
      paymentMethod:
        $ref: '#/definitions/types.PaymentMethod'
      salesSlotId:
        type: string
      ticketNumber:
        type: string
    type: object
  handlers.CreateProductRequest:
    properties:
      name:
        type: string
      price:
        type: integer
    type: object
  handlers.CreateSalesSlotRequest:
    properties:
      endTime:
        type: string
      startTime:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  handlers.OrderItemCreateInput:
    properties:
      productId:
        type: string
      quantity:
        type: integer
    type: object
  handlers.OrderItemResponse:
    properties:
      id:
        type: string
      price:
        type: integer
      productId:
        type: string
      quantity:
        type: integer
    type: object
  handlers.OrderResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      isDelivered:
        type: boolean
      isPaid:
        type: boolean
      items:
        items:
          $ref: '#/definitions/handlers.OrderItemResponse'
        type: array
      paymentMethod:
        type: string
      salesSlotId:
        type: string
      status:
        type: string
      ticketNumber:
        type: string
      totalAmount:
        type: integer
      transactionId:
        type: string
      updatedAt:
        type: string
    type: object
  handlers.PaymentUpdateRequest:
    properties:
      transactionId:
        type: string
    type: object
  handlers.ProductInventoryResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      initialQuantity:
        type: integer
      productId:
        type: string
      reservedQuantity:
        type: integer
      salesSlotId:
        type: string
      soldQuantity:
        type: integer
      updatedAt:
        type: string
    type: object
  handlers.ProductResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      updatedAt:
        type: string
    type: object
  handlers.SalesSlotResponse:
    properties:
      createdAt:
        type: string
      endTime:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      startTime:
        type: string
      updatedAt:
        type: string
    type: object
  handlers.UpdateProductRequest:
    properties:
      name:
        type: string
      price:
        type: integer
    type: object
  types.PaymentMethod:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - _
    - CASH
    - PAYPAY
    - SQUARE
host: localhost:8080
info:
  contact: {}
  description: 第66回聖光祭食品システムバックエンドサーバー
  title: TimesEats API
  version: "1.0"
paths:
  /orders:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OrderResponse'
            type: array
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      parameters:
      - description: Order information
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get an order by ID
      tags:
      - orders
  /orders/{id}/cancel:
    put:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Cancel an order
      tags:
      - orders
  /orders/{id}/confirm:
    put:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Confirm an order
      tags:
      - orders
  /orders/{id}/delivery:
    put:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update delivery status
      tags:
      - orders
  /orders/{id}/items:
    post:
      consumes:
      - application/json
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order items
        in: body
        name: items
        required: true
        schema:
          items:
            $ref: '#/definitions/handlers.OrderItemCreateInput'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Add items to an order
      tags:
      - orders
  /orders/{id}/payment:
    put:
      consumes:
      - application/json
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/handlers.PaymentUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update payment status
      tags:
      - orders
  /orders/number/{ticketNumber}:
    get:
      parameters:
      - description: Ticket Number
        in: path
        name: ticketNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get an order by ticket number
      tags:
      - orders
  /orders/status/{status}:
    get:
      parameters:
      - description: Order Status
        enum:
        - RESERVED
        - CONFIRMED
        - CANCELLED
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OrderResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get orders by status
      tags:
      - orders
  /products:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ProductResponse'
            type: array
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      parameters:
      - description: Product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /sales-slots:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.SalesSlotResponse'
            type: array
      summary: Get all sales slots
      tags:
      - sales-slots
    post:
      consumes:
      - application/json
      parameters:
      - description: Sales slot information
        in: body
        name: slot
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateSalesSlotRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.SalesSlotResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new sales slot
      tags:
      - sales-slots
  /sales-slots/{id}:
    get:
      parameters:
      - description: Sales Slot ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SalesSlotResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a sales slot by ID
      tags:
      - sales-slots
  /sales-slots/{id}/activate:
    put:
      parameters:
      - description: Sales Slot ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SalesSlotResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Activate a sales slot
      tags:
      - sales-slots
  /sales-slots/{id}/deactivate:
    put:
      parameters:
      - description: Sales Slot ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SalesSlotResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Deactivate a sales slot
      tags:
      - sales-slots
  /sales-slots/{id}/products:
    get:
      parameters:
      - description: Sales Slot ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ProductInventoryResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all products in a sales slot
      tags:
      - sales-slots
    post:
      consumes:
      - application/json
      parameters:
      - description: Sales Slot ID
        in: path
        name: id
        required: true
        type: string
      - description: Product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.AddProductToSlotRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ProductInventoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Add a product to a sales slot
      tags:
      - sales-slots
produces:
- application/json
schemes:
- http
- https
swagger: "2.0"
